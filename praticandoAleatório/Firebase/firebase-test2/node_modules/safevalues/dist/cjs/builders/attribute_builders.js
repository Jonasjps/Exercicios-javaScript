"use strict";
/**
 * @license
 * SPDX-License-Identifier: Apache-2.0
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.safeAttrPrefix = void 0;
require("../environment/dev.js");
const attribute_impl_js_1 = require("../internals/attribute_impl.js");
const string_literal_js_1 = require("../internals/string_literal.js");
const sensitive_attributes_js_1 = require("./sensitive_attributes.js");
/**
 * Creates a SafeAttributePrefix object from a template literal with no
 * interpolations for attributes that share a common prefix guaranteed to be not
 * security sensitive.
 *
 * The template literal is a prefix that makes it obvious this attribute is not
 * security sensitive. If it doesn't, this function will throw.
 */
function safeAttrPrefix(templ) {
    if (process.env.NODE_ENV !== 'production') {
        (0, string_literal_js_1.assertIsTemplateObject)(templ, 0);
    }
    const attrPrefix = templ[0].toLowerCase();
    if (process.env.NODE_ENV !== 'production') {
        if (attrPrefix.indexOf('on') === 0 || 'on'.indexOf(attrPrefix) === 0) {
            throw new Error(`Prefix '${templ[0]}' does not guarantee the attribute ` +
                `to be safe as it is also a prefix for event handler attributes` +
                `Please use 'addEventListener' to set event handlers.`);
        }
        sensitive_attributes_js_1.SECURITY_SENSITIVE_ATTRIBUTES.forEach((sensitiveAttr) => {
            if (sensitiveAttr.indexOf(attrPrefix) === 0) {
                throw new Error(`Prefix '${templ[0]}' does not guarantee the attribute ` +
                    `to be safe as it is also a prefix for ` +
                    `the security sensitive attribute '${sensitiveAttr}'. ` +
                    `Please use native or safe DOM APIs to set the attribute.`);
            }
        });
    }
    return (0, attribute_impl_js_1.createAttributePrefixInternal)(attrPrefix);
}
exports.safeAttrPrefix = safeAttrPrefix;
