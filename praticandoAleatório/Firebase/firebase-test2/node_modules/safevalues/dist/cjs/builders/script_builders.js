"use strict";
/**
 * @license
 * SPDX-License-Identifier: Apache-2.0
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.safeScriptWithArgs = exports.valueAsScript = exports.concatScripts = exports.safeScript = void 0;
require("../environment/dev.js");
const script_impl_js_1 = require("../internals/script_impl.js");
const string_literal_js_1 = require("../internals/string_literal.js");
/**
 * Creates a SafeScript object from a template literal (without any embedded
 * expressions).
 *
 * This function is a template literal tag function. It should be called with
 * a template literal that does not contain any expressions. For example,
 *                           safeScript`foo`;
 *
 * @param templateObj This contains the literal part of the template literal.
 * @param emptyArgs Expressions that evaluate to the empty string to enable
 *     inline comments.
 */
function safeScript(templateObj, ...emptyArgs) {
    if (process.env.NODE_ENV !== 'production') {
        if (emptyArgs.some((a) => a !== '')) {
            throw new Error('safeScript only allows empty string expressions ' +
                'to enable inline comments.');
        }
        (0, string_literal_js_1.assertIsTemplateObject)(templateObj, emptyArgs.length);
    }
    return (0, script_impl_js_1.createScriptInternal)(templateObj.join(''));
}
exports.safeScript = safeScript;
/** Creates a `SafeScript` value by concatenating multiple `SafeScript`s. */
function concatScripts(scripts) {
    return (0, script_impl_js_1.createScriptInternal)(scripts.map(script_impl_js_1.unwrapScript).join(''));
}
exports.concatScripts = concatScripts;
/**
 * Converts a serializable value into JSON that is safe to interpolate into a
 * script context. In particular it escapes < characters so that a value of
 * "&lt/script>" doesn't break out of the context.
 * @param value The value to serialize.
 */
function valueAsScript(value) {
    return (0, script_impl_js_1.createScriptInternal)(JSON.stringify(value).replace(/</g, '\\u003C'));
}
exports.valueAsScript = valueAsScript;
/**
 * Creates a `SafeScript` object from a template literal (without any embedded
 * expressions) along with additional arguments that the script should have
 * access to. These arguments will be JSON-encoded and passed to the script as
 * a function call.
 * @example
 * ```ts
 * safeScriptWithArgs`function (name, props) {
 *  console.log(name + ' is ' + props.age);
 * }`('Bob', { 'age': 42 })
 * ```
 * would return a `SafeScript` that represents the following code:
 * ```js
 * (function (name, props) {
 *  console.log(name + ' is ' + props.age);
 * })("Bob",{"age":42})
 * ```
 * @note Be careful when passing objects as arguments, as unquoted property
 * names may be changed during compilation.
 * @param templateObj This contains the literal part of the template literal.
 * @param emptyArgs Expressions that evaluate to the empty string to enable
 *     inline comments.
 */
function safeScriptWithArgs(templateObj, ...emptyArgs) {
    if (process.env.NODE_ENV !== 'production') {
        if (emptyArgs.some((a) => a !== '')) {
            throw new Error('safeScriptWithArgs only allows empty string expressions ' +
                'to enable inline comments.');
        }
        (0, string_literal_js_1.assertIsTemplateObject)(templateObj, emptyArgs.length);
    }
    return (...argValues) => {
        const values = argValues.map((v) => valueAsScript(v).toString());
        return (0, script_impl_js_1.createScriptInternal)(`(${templateObj.join('')})(${values.join(',')})`);
    };
}
exports.safeScriptWithArgs = safeScriptWithArgs;
