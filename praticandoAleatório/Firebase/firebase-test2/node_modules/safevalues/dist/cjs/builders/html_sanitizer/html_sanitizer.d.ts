/**
 * @license
 * SPDX-License-Identifier: Apache-2.0
 */
import '../../environment/dev.js';
import { SafeHtml } from '../../internals/html_impl.js';
import { ResourceUrlPolicy } from './resource_url_policy.js';
import { SanitizerTable } from './sanitizer_table/sanitizer_table.js';
/**
 * An HTML5-compliant markup sanitizer that produces SafeHtml markup.
 *
 * You can build sanitizers with a custom configuration using the
 * HtmlSanitizerBuilder.
 */
export interface HtmlSanitizer {
    sanitize(html: string): SafeHtml;
    sanitizeToFragment(html: string): DocumentFragment;
    sanitizeAssertUnchanged(html: string): SafeHtml;
}
/** A function that sanitizes a CSS string. */
export declare type CssSanitizer = (css: string) => string;
/** Implementation for `HtmlSanitizer` */
export declare class HtmlSanitizerImpl implements HtmlSanitizer {
    private readonly sanitizerTable;
    private readonly styleElementSanitizer?;
    private readonly styleAttributeSanitizer?;
    private readonly resourceUrlPolicy?;
    private changes;
    constructor(sanitizerTable: SanitizerTable, token: object, styleElementSanitizer?: CssSanitizer | undefined, styleAttributeSanitizer?: CssSanitizer | undefined, resourceUrlPolicy?: ResourceUrlPolicy | undefined);
    sanitizeAssertUnchanged(html: string): SafeHtml;
    sanitize(html: string): SafeHtml;
    sanitizeToFragment(html: string): DocumentFragment;
    private sanitizeToFragmentInternal;
    private createTextNode;
    private sanitizeTextNode;
    private sanitizeElementNode;
    nodeFilter(node: Node): number;
    private recordChange;
    private satisfiesAllConditions;
}
interface SrcsetPart {
    url: string;
    descriptor: string | undefined;
}
/**
 * A structured representation of a srcset attribute.
 */
export interface Srcset {
    parts: SrcsetPart[];
}
/**
 * Parses a srcset attribute into a structured representation.
 *
 * @param srcset The srcset attribute value.
 * @return The parsed srcset.
 */
export declare function parseSrcset(srcset: string): Srcset;
/**
 * Serializes a srcset into a string.
 *
 * @param srcset The srcset to serialize.
 * @return The serialized srcset.
 */
export declare function serializeSrcset(srcset: Srcset): string;
/** Sanitizes untrusted html using the default sanitizer configuration. */
export declare function sanitizeHtml(html: string): SafeHtml;
/**
 * Sanitizes untrusted html using the default sanitizer configuration. Throws
 * an error if the html was changed.
 */
export declare function sanitizeHtmlAssertUnchanged(html: string): SafeHtml;
/**
 * Sanitizes untrusted html using the default sanitizer configuration. Throws
 * an error if the html was changed.
 */
export declare function sanitizeHtmlToFragment(html: string): DocumentFragment;
export {};
