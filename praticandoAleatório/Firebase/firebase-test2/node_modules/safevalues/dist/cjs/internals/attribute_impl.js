"use strict";
/**
 * @license
 * SPDX-License-Identifier: Apache-2.0
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.unwrapAttributePrefix = exports.isAttributePrefix = exports.createAttributePrefixInternal = exports.SafeAttributePrefix = void 0;
/** @fileoverview Internal implementations of SafeAttributePrefix. */
require("../environment/dev.js");
const secrets_js_1 = require("./secrets.js");
/**
 * A prefix with which an attribute is safe to set using plain strings.
 */
class SafeAttributePrefix {
    constructor(token, value) {
        if (process.env.NODE_ENV !== 'production') {
            (0, secrets_js_1.ensureTokenIsValid)(token);
        }
        this.privateDoNotAccessOrElseWrappedAttributePrefix = value;
    }
    toString() {
        return this.privateDoNotAccessOrElseWrappedAttributePrefix;
    }
}
exports.SafeAttributePrefix = SafeAttributePrefix;
const AttributePrefixImpl = SafeAttributePrefix;
/**
 * Builds a new `SafeAttributePrefix` from the given string, without enforcing
 * safety guarantees. This shouldn't be exposed to application developers, and
 * must only be used as a step towards safe builders or safe constants.
 */
function createAttributePrefixInternal(value) {
    return new AttributePrefixImpl(secrets_js_1.secretToken, value);
}
exports.createAttributePrefixInternal = createAttributePrefixInternal;
/**
 * Checks if the given value is a `SafeAttributePrefix` instance.
 */
function isAttributePrefix(value) {
    return value instanceof SafeAttributePrefix;
}
exports.isAttributePrefix = isAttributePrefix;
/**
 * Returns the string value of the passed `SafeAttributePrefix` object while
 * ensuring it has the correct type.
 */
function unwrapAttributePrefix(value) {
    if (isAttributePrefix(value)) {
        return value
            .privateDoNotAccessOrElseWrappedAttributePrefix;
    }
    let message = '';
    if (process.env.NODE_ENV !== 'production') {
        message = `Unexpected type when unwrapping SafeAttributePrefix, got '${value}' of type '${typeof value}'`;
    }
    throw new Error(message);
}
exports.unwrapAttributePrefix = unwrapAttributePrefix;
