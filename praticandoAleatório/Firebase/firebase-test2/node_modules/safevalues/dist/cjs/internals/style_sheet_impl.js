"use strict";
/**
 * @license
 * SPDX-License-Identifier: Apache-2.0
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.unwrapStyleSheet = exports.isStyleSheet = exports.createStyleSheetInternal = exports.SafeStyleSheet = void 0;
require("../environment/dev.js");
const secrets_js_1 = require("./secrets.js");
/**
 * A complete CSS style sheet, safe to use in style contexts in an HTML document
 * or DOM APIs.
 */
class SafeStyleSheet {
}
exports.SafeStyleSheet = SafeStyleSheet;
/** Implementation for `SafeStyleSheet` */
class StyleSheetImpl extends SafeStyleSheet {
    constructor(styleSheet, token) {
        super();
        (0, secrets_js_1.ensureTokenIsValid)(token);
        this.privateDoNotAccessOrElseWrappedStyleSheet = styleSheet;
    }
    toString() {
        return this.privateDoNotAccessOrElseWrappedStyleSheet;
    }
}
/**
 * Builds a new `SafeStyleSheet` from the given string, without enforcing
 * safety guarantees. This shouldn't be exposed to application developers, and
 * must only be used as a step towards safe builders or safe constants.
 */
function createStyleSheetInternal(styleSheet) {
    return new StyleSheetImpl(styleSheet, secrets_js_1.secretToken);
}
exports.createStyleSheetInternal = createStyleSheetInternal;
/**
 * Checks if the given value is a `SafeStyleSheet` instance.
 */
function isStyleSheet(value) {
    return value instanceof StyleSheetImpl;
}
exports.isStyleSheet = isStyleSheet;
/**
 * Returns the string value of the passed `SafeStyleSheet` object while
 * ensuring it has the correct type.
 */
function unwrapStyleSheet(value) {
    if (value instanceof StyleSheetImpl) {
        return value.privateDoNotAccessOrElseWrappedStyleSheet;
    }
    else {
        let message = '';
        if (process.env.NODE_ENV !== 'production') {
            message = 'Unexpected type when unwrapping SafeStyleSheet';
        }
        throw new Error(message);
    }
}
exports.unwrapStyleSheet = unwrapStyleSheet;
