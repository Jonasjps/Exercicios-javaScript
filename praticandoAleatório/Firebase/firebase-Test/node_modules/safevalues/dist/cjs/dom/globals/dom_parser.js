"use strict";
/**
 * @license
 * SPDX-License-Identifier: Apache-2.0
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseFromString = exports.parseXml = exports.parseHtml = void 0;
require("../../environment/dev.js");
const html_impl_js_1 = require("../../internals/html_impl.js");
/** Safely parses a string using the HTML parser. */
function parseHtml(parser, html) {
    return parseFromString(parser, html, 'text/html');
}
exports.parseHtml = parseHtml;
/**
 * Safely parses a string using the XML parser. If the XML document is found to
 * contain any elements from the HTML or SVG namespaces, an error is thrown for
 * security reasons.
 */
function parseXml(parser, xml) {
    const doc = parseFromString(parser, (0, html_impl_js_1.createHtmlInternal)(xml), 'text/xml');
    const iterator = document.createNodeIterator(doc, NodeFilter.SHOW_ALL);
    let currentNode;
    while ((currentNode = iterator.nextNode())) {
        if (currentNode instanceof HTMLElement ||
            currentNode instanceof SVGElement) {
            let message = 'unsafe XML';
            if (process.env.NODE_ENV !== 'production') {
                message = `attempted to parse an XML document that embeds HTML or SVG content`;
            }
            throw new Error(message);
        }
    }
    return doc;
}
exports.parseXml = parseXml;
/** Safely parses a string using the HTML or XML parser. */
function parseFromString(parser, content, contentType) {
    return parser.parseFromString((0, html_impl_js_1.unwrapHtml)(content), contentType);
}
exports.parseFromString = parseFromString;
