/**
 * @license
 * SPDX-License-Identifier: Apache-2.0
 */
import { HtmlSanitizer } from './html_sanitizer.js';
import { ResourceUrlPolicy } from './resource_url_policy.js';
/** This class allows modifications to the default sanitizer configuration. */
export declare class HtmlSanitizerBuilder {
    private sanitizerTable;
    private calledBuild;
    private resourceUrlPolicy?;
    constructor();
    /** Builder option to restrict allowed elements to a smaller subset. */
    onlyAllowElements(elementSet: ReadonlySet<string>): HtmlSanitizerBuilder;
    /**
     * Builder option to allow a set of custom elements. Must be called either
     * without or after `onlyAllowElements` - will be overwritten otherwise.
     * Custom elements must contain a dash.
     */
    allowCustomElement(element: string, allowedAttributes?: ReadonlySet<string>): HtmlSanitizerBuilder;
    /**
     * Builder option to restrict allowed attributes to a smaller subset.
     *
     * If the attribute isn't currently allowed then it won't be added.
     */
    onlyAllowAttributes(attributeSet: ReadonlySet<string>): HtmlSanitizerBuilder;
    /**
     * Allows the set of data attributes passed.
     *
     * These values must be prefixed with "data-"
     *
     * If called with onlyAllowElements or onlyAllowAttributes, those methods must
     * be called first.
     */
    allowDataAttributes(attributes: string[]): HtmlSanitizerBuilder;
    /**
     * Preserves style attributes. Note that the sanitizer won't parse and
     * sanitize the values but keep them as they are. In particular this means
     * that the code will be able to call functions that could do undesirable
     * things (e.g. `url` to trigger a network request), as well as any custom
     * properties or functions defined by the application.
     */
    allowStyleAttributes(): HtmlSanitizerBuilder;
    /**
     * Preserves the class attribute on all elements. This means contents can
     * adopt CSS styles from other page elements and possibly mask themselves as
     * legitimate UI elements, which can lead to phishing.
     */
    allowClassAttributes(): HtmlSanitizerBuilder;
    /**
     * Preserves id attributes. This carries moderate risk as it allows an
     * element to override other elements with the same ID.
     */
    allowIdAttributes(): HtmlSanitizerBuilder;
    /**
     * Preserves (some) attributes that reference existing ids. This carries a
     * moderate security risk, because sanitized content can create semantic
     * associations with existing elements in the page, regardless of the layout.
     * This could be used to override the label associated with a form input by a
     * screen reader, and facilitate phishing.
     */
    allowIdReferenceAttributes(): HtmlSanitizerBuilder;
    /**
     * Sets the ResourceUrlPolicy to be used by the sanitizer.
     *
     * The ResourceUrlPolicy can be used to decide whether a given URL is allowed
     * to be loaded as an external resource. It is a function that an instance
     * of `URL` and a set of hints giving a context on why an image was loaded.
     *
     * The policy can return `null` to indicate that the resource should be
     * dropped, otherwise it should return a valid `URL` that will be used to
     * replace the original URL in the sanitized output.
     *
     * For example the following policy will allow all images loaded from
     * `https://google.com` but will drop all images loaded from
     * `https://forbidden.google.com`.
     *
     * ```typescript
     * const resourceUrlPolicy: ResourceUrlPolicy = (url) => {
     *   if (url.hostname === 'forbidden.google.com') {
     *     return null;
     *   }
     *   return url;
     * };
     * ```
     *
     * You can also use the `ResourceUrlPolicyHints` to make the policy more
     * informed. For example the following policy will only allow images loaded
     * via a <img src> tag but will drop all other images.
     *
     * ```typescript
     * const resourceUrlPolicy: ResourceUrlPolicy = (url, hints) => {
     *   if (hints.type === ResourceUrlPolicyHintsType.HTML_ATTRIBUTE &&
     *       hints.attributeName === 'src' &&
     *       hints.tagName === 'IMG') {
     *     return url;
     *   }
     *   return null;
     * };
     * ```
     */
    withResourceUrlPolicy(resourceUrlPolicy: ResourceUrlPolicy): HtmlSanitizerBuilder;
    build(): HtmlSanitizer;
}
